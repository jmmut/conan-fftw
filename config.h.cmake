include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckLibraryExists)
include(CheckSymbolExists)
include(CheckTypeSize)

set(DISABLE_FORTRAN true)
set(F77_DUMMY_MAIN)
set(F77_FUNC)
set(F77_FUNC_)
set(F77_FUNC_EQUIV)
set(FFTW_CC ${CMAKE_C_COMPILER})
set(FFTW_DEBUG)
set(FFTW_DEBUG_ALIGNMENT)
set(FFTW_DEBUG_MALLOC)
set(FFTW_ENABLE_ALLOCA)
set(FFTW_RANDOM_ESTIMATOR)
CHECK_FUNCTION_EXISTS(abort HAVE_ABORT)
CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)
CHECK_INCLUDE_FILE(alloca.h HAVE_ALLOCA_H)
set(HAVE_ALTIVEC)
set(HAVE_ALTIVEC_H)
set(HAVE_AVX)
CHECK_FUNCTION_EXISTS(BSDgettimeofday HAVE_BSDGETTIMEOFDAY)
CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
CHECK_FUNCTION_EXISTS(cosl HAVE_COSL)
CHECK_INCLUDE_FILE(c_asm.h HAVE_C_ASM_H)
CHECK_SYMBOL_EXISTS(cosl math.h HAVE_DECL_COSL)
CHECK_SYMBOL_EXISTS(drand48 stdlib.h HAVE_DECL_DRAND48)
CHECK_SYMBOL_EXISTS(memalign stdlib.h;malloc.h HAVE_DECL_MEMALIGN)
CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_DECL_POSIX_MEMALIGN)
CHECK_SYMBOL_EXISTS(sinl math.h HAVE_DECL_SINL)
CHECK_SYMBOL_EXISTS(srand48 stdlib.h HAVE_DECL_SRAND48)
CHECK_FUNCTION_EXISTS(drand48 HAVE_DRAND48)
set(HAVE_FMA)
CHECK_FUNCTION_EXISTS(gethrtime HAVE_GETHRTIME)
CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
set(HAVE_HRTIME_T)
CHECK_INCLUDE_FILE(intrinsics.h HAVE_INTRINSICS_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_FUNCTION_EXISTS(isnan HAVE_ISNAN)
set(HAVE_LIBQUADMATH)
CHECK_FUNCTION_EXISTS(mach_absolute_time HAVE_MACH_ABSOLUTE_TIME)
CHECK_INCLUDE_FILE(mach/mach_time.h HAVE_MACH_MACH_TIME_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_FUNCTION_EXISTS(memalign HAVE_MEMALIGN)
set(HAVE_MIPS_ZBUS_TIMER)
set(HAVE_NEON)
CHECK_FUNCTION_EXISTS(posix_memalign HAVE_POSIX_MEMALIGN)
CHECK_FUNCTION_EXISTS(read_real_time HAVE_READ_REAL_TIME)
CHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_FUNCTION_EXISTS(sysctl HAVE_SYSCTL)
CHECK_INCLUDE_FILE(sys/sysctl.h HAVE_SYS_SYSCTL_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
set(HAVE_THREADS)
CHECK_FUNCTION_EXISTS(time_base_to_time HAVE_TIME_BASE_TO_TIME)
CHECK_TYPE_SIZE(uintptr_t UINTPTR_T)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_FUNCTION_EXISTS(_mm_malloc HAVE__MM_MALLOC)
set(HAVE__RTC)

set(PACKAGE fftw)
set(PACKAGE_VERSION ${VER_MAJ}.${VER_MIN}.${VER_PT})

CHECK_TYPE_SIZE(double SIZEOF_DOUBLE)
CHECK_TYPE_SIZE(float SIZEOF_FLOAT)
CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE("unsigned long" SIZEOF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("void*" SIZEOF_VOID_P)
set(STDC_HEADERS 1)
if(HAVE_SYS_TIME_H)
  set(TIME_WITH_SYS_TIME 1)
else()
  set(TIME_WITH_SYS_TIME)
endif()
set(VERSION ${PACKAGE_VERSION})
set(WINDOWS_F77_MANGLING)
set(WITH_G77_WRAPPERS)
set(WITH_OUR_MALLOC 1)
set(WITH_SLOW_TIMER)
if(NOT DEFINED C_INLINE)
  # test how compiler defines inline (like autoconf's AC_C_INLINE)
  # http://www.cmake.org/pipermail/cmake/2007-September/016285.html
  message(STATUS "Determining inline definition")
  file(WRITE ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
    "/* Test source lifted from autoconf/c.m4 */\n"
    "typedef int foo_t;\n"
    "static inline foo_t static_foo() { return 0; }\n"
    "foo_t foo() { return 0; }\n"
    "int main(int argc, char* argv[]) { return 0; }\n"
    )
  set(C_INLINE_KEYWORD " ")
  foreach(KEYWORD inline __inline__ __inline)
    try_compile(C_HAS_${KEYWORD} ${CMAKE_BINARY_DIR}
      ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
      COMPILE_DEFINITIONS "-Dinline=${KEYWORD}"
      )
    if(C_HAS_${KEYWORD})
      set(C_INLINE TRUE CACHE INTERNAL "test_inline: boolean")
      set(C_INLINE_KEYWORD ${KEYWORD} CACHE INTERNAL "test_inline: keyword")
    endif()
  endforeach()
  if(C_INLINE)
    message(STATUS "Determining inline definition - done")
  else()
    message(STATUS "Determining inline definition - failed")
  endif()
endif(NOT DEFINED C_INLINE)
set(inline ${C_INLINE_KEYWORD})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmaketemplate ${config_directory}/config.h)
